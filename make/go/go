#!/usr/bin/env bash
cd "$(dirname "$0")"
function usage {
	echo "$(basename "$root/src/meta/make/go") <src> <yield>" ;}
if [ "$#" -ne 2 ]; then
	echo "$(usage)"
	exit 1 ;fi


function use_deps {
	cd "$(dirname "$root/src/meta/make/go")" ;}
function use_coreutils {
	([[ `uname` == 'Darwin' ]]
	) && { [ -d "/usr/local/opt/coreutils/libexec/gnubin" ] || {
		echo "coreutils not found"
		return 1 
	} && PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH" ;} }
function use_node {
	use_node_bare || {
		return 1 
	} && ([ -f "$(dirname $(npm root))/package.json" ]
	) && { [ -d "$(npm root)" ] || {
		#TODO: does not cover case of empty dependencies
		echo "node modules not installed"
		return 1 ;} } }
function use_node_bare {
	. ~/.nvm/nvm.sh --no-use
	nvm use 10 > /dev/null
	[[ "$(node --version)" == "v10"* ]] || {
		echo "couldn't change to node v10"
		return 1 ;} }
function use_file {
	[ -d "$1" ] || {
		echo "$1 doesn't exist"
		return 1 ;} }

function find_project_root {
	git rev-parse --show-toplevel; } 

src="$1"
yield="$2"

root="$(find_project_root)"
use_deps || {
	echo "please compile $root/src/meta/make/go"
	exit 1 
} && use_coreutils || {
	exit 1 
} && use_file "$src/go" || {
	exit 1 
} && {
	mkdir -p "$yield" && rm -r "$yield/*" 2> /dev/null
	cp "$src/go" "$yield/go"

	function search_deps {
		([[ -f "$1/deps.sh" ]]
		) && {
			echo "$1/deps.sh"
			return 0
		} || ([[ "$1" == / ]]
		) && {
			return 1 
		} || {
			o="$(search_deps "$(dirname $1)")"
			e=$?
			echo "$o"
			return $e ;} }
	
	dep_path="$(search_deps "$src")"
	has_dep=$?

	function status {
		return $1 ;}
	
	(status $has_dep) && {
		#remove shebang
		sed -i '1d' "$yield/go"
		echo -e "$(cat "$dep_path")
$(cat "$yield/go")" > "$yield/go" ;}

	function rel_path {
		source="$(readlink -f "$1")"
		target="$(readlink -f "$2")"
			
		common_part=$source
		result=""

		while [[ "${target#$common_part}" == "${target}" ]]; do
		    common_part="$(dirname $common_part)"
		    if [[ -z $result ]]; then
			result=".."
		    else
			result="../$result" ;fi ;done

		if [[ $common_part == "/" ]]; then
		    result="$result/" ;fi

		forward_part="${target#$common_part}"

		if [[ -n $result ]] && [[ -n $forward_part ]]; then
		    result="$result$forward_part"
		elif [[ -n $forward_part ]]; then
		    result="${forward_part:1}" ;fi

		echo $result; }

	src_from_root="$(rel_path "$root" "$src")"
	src_rel_path="$(echo '$root/'"$src_from_root" | sed 's/\//\\//g')"

	src_from_yield="$(rel_path "$yield" "$src")"

	sed -i "s/"'$root/src/meta/make/go'"/$src_rel_path/" "$yield/go"
	sed -i '2 i cd "$(dirname "$root/src/meta/make/go")"' "$yield/go"

	} || {
	echo "failed to make go of $src"
	exit 1 ;}
