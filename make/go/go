#!/usr/bin/env bash

function use_deps {
	cd "$root/source/meta/make/go" ;}
function use_coreutils {
	if [[ `uname` == 'Darwin' ]]; then
		[ -d "/usr/local/opt/coreutils/libexec/gnubin" ] || {
			echo "coreutils not found"
			return 1 
		} && PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH" ;fi }
function use_node {
	use_node_bare || {
		return 1 
	} && if [ -f "$(dirname $(npm root))/package.json" ]; then
		[ -d "$(npm root)" ] || {
			#TODO: does not cover case of empty dependencies
			echo "node modules not installed"
			return 1 ;} fi ;}
function use_node_bare {
	. ~/.nvm/nvm.sh --no-use
	nvm use 10 > /dev/null
	[[ "$(node --version)" == "v10"* ]] || {
		echo "couldn't change to node v10"
		return 1 ;} }
function use_file {
	[ -f "$1" ] || {
		echo "$1 doesn't exist"
		return 1 ;} }

function find_project_root {
	_pwd="$(pwd)"
	cd "$(dirname "${0}")"
	git rev-parse --show-toplevel
	cd "$_pwd" ;} 
function find_temp_path {
	use_coreutils && tmp_path="$temp/$(date +%s)" && [ ! -e "$tmp_path" ] && {
		echo "$tmp_path"
	} || {
		echo "failed to find temp path"
		exit 1 ;} }

function fail {
	eval $@
	exit 1 ;}

use_coreutils || {
	exit 1 
} && {
	pwd="$(pwd)"
	root="$(find_project_root)"
	temp="$root/temp" ;}
function as_make {
	if [ "$#" -ne 2 ]; then
		echo "$(basename "$(dirname ${0})") <source> <out>"
		exit 1 ;fi

	_pwd="$(pwd)"
	cd "$pwd"
	source="$(readlink -m "${1%/}")"
	out="$(readlink -m "${2%/}")"
	cd "$_pwd" ;}
use_deps && as_make $@ || {
	echo "please compile $root/source/meta/make/go"
	exit 1 
} && use_coreutils || (fail
) && use_file "$source/go" || (fail
) && {
	mkdir -p "$out" && rm -r "$out/*" 2> /dev/null
	cp "$source/go" "$out/go"

	function search_deps {
		([[ -f "$1/deps.sh" ]]
		) && {
			echo "$1/deps.sh"
			return 0
		} || ([[ "$1" == / ]]
		) && {
			return 1 
		} || {
			o="$(search_deps "$(dirname $1)")"
			e=$?
			echo "$o"
			return $e ;} }
	
	dep_path="$(search_deps "$source")"
	has_dep=$?

	function status {
		return $1 ;}
	
	(status $has_dep) && {
		#remove shebang
		sed -i '1d' "$out/go"
		echo -e "$(cat "$dep_path")
$(cat "$out/go")" > "$out/go" ;}

	function rel_path {
		source="$(readlink -m "$1")"
		target="$(readlink -m "$2")"
			
		common_part=$source
		result=""

		while [[ "${target#$common_part}" == "${target}" ]]; do
		    common_part="$(dirname $common_part)"
		    if [[ -z $result ]]; then
			result=".."
		    else
			result="../$result" ;fi ;done

		if [[ $common_part == "/" ]]; then
		    result="$result/" ;fi

		forward_part="${target#$common_part}"

		if [[ -n $result ]] && [[ -n $forward_part ]]; then
		    result="$result$forward_part"
		elif [[ -n $forward_part ]]; then
		    result="${forward_part:1}" ;fi

		echo $result ;}

	source_from_root="$(rel_path "$root" "$source")"
	source_rel_path='$root/'"$source_from_root"

	#source_from_out="$(rel_path "$out" "$source")"

	sed -i 's|$''0|'"$source_rel_path"'|g' "$out/go"

	} || fail echo "failed to make go of $source"
