#!/usr/bin/env bash
use_deps || {
	echo "please compile $0"
	exit 1 
} && use_coreutils || {
	exit 1 
} && use_file "$source/go" || {
	exit 1 
} && {
	mkdir -p "$out" && rm -r "$out/*" 2> /dev/null
	cp "$source/go" "$out/go"

	function search_deps {
		([[ -f "$1/deps.sh" ]]
		) && {
			echo "$1/deps.sh"
			return 0
		} || ([[ "$1" == / ]]
		) && {
			return 1 
		} || {
			o="$(search_deps "$(dirname $1)")"
			e=$?
			echo "$o"
			return $e ;} }
	
	dep_path="$(search_deps "$source")"
	has_dep=$?

	function status {
		return $1 ;}
	
	(status $has_dep) && {
		#remove shebang
		sed -i '1d' "$out/go"
		echo -e "$(cat "$dep_path")\n$(cat "$out/go")" > "$out/go" ;}

	function rel_path {
		source="$(readlink -m "$1")"
		target="$(readlink -m "$2")"
			
		common_part=$source
		result=""

		while [[ "${target#$common_part}" == "${target}" ]]; do
		    common_part="$(dirname $common_part)"
		    if [[ -z $result ]]; then
			result=".."
		    else
			result="../$result" ;fi ;done

		if [[ $common_part == "/" ]]; then
		    result="$result/" ;fi

		forward_part="${target#$common_part}"

		if [[ -n $result ]] && [[ -n $forward_part ]]; then
		    result="$result$forward_part"
		elif [[ -n $forward_part ]]; then
		    result="${forward_part:1}" ;fi

		echo $result; }

	source_from_root="$(rel_path "$root" "$source")"
	source_rel_path='$root/'"$source_from_root"

	#source_from_out="$(rel_path "$out" "$source")"

	sed -i 's|$''0|'"$source_rel_path"'|g' "$out/go"

	} || {
	echo "failed to make go of $source"
	exit 1 ;}
