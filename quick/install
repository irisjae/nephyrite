#!/usr/bin/env bash

function use_deps {
	cd "$root/../../source/meta/quick/install" ;}
function use_coreutils {
	if [[ `uname` == 'Darwin' ]]; then
		[ -d "/usr/local/opt/coreutils/libexec/gnubin" ] || {
			echo "coreutils not found"
			return 1 
		} && PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH" ;fi }
function use_node {
	use_node_bare || {
		return 1 
	} && if [ -f "$(dirname $(npm root))/package.json" ]; then
		[ -d "$(npm root)" ] || {
			#TODO: does not cover case of empty dependencies
			echo "node modules not installed"
			return 1 ;} fi ;}
function use_node_bare {
	. ~/.nvm/nvm.sh --no-use
	nvm use 10 > /dev/null
	[[ "$(node --version)" == "v10"* ]] || {
		echo "couldn't change to node v10"
		return 1 ;} }
function use_file {
	[ -f "$1" ] || {
		echo "$1 doesn't exist"
		return 1 ;} }

function find_project_root {
	_pwd="$(pwd)"
	cd "$(dirname "${0}")"
	git rev-parse --show-toplevel || {
		echo "failed to find project root"
		echo "is git installed?"
		return 1 ;}
	cd "$_pwd" ;} 
function find_temp_path {
	use_coreutils && tmp_path="$temp/$(date +%s)" && [ ! -e "$tmp_path" ] && {
		echo "$tmp_path"
	} || {
		echo "failed to find temp path"
		exit 1 ;} }

function fail {
	eval $@
	exit 1 ;}

pwd="$(pwd)"
root="$(find_project_root || exit)"
temp="$root/.temp"

use_deps || {
	echo "please compile $root/../../source/meta/quick/install"
	exit 1
} && {
	if [[ `uname` == 'Darwin' ]]; then
		echo checking gnu tools...
		command -v brew > /dev/null || { 
			echo please install homebrew then try again; 
			echo see https://github.com/Homebrew/install;
			exit 1;
		}
		brew install coreutils
		#brew install binutils
		#brew install diffutils
		#brew install ed --with-default-names
		#brew install findutils --with-default-names
		#brew install gawk
		#brew install gnu-indent --with-default-names
		#brew install gnu-sed --with-default-names
		#brew install gnu-tar --with-default-names
		#brew install gnu-which --with-default-names
		#brew install gnutls
		brew install grep --with-default-names
		#brew install gzip
		#brew install screen
		#brew install watch
		#brew install wdiff --with-gettext
		#brew install wget
		PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
		echo
		echo ;fi

	echo checking nvm version...
	[ -e ~/.nvm/nvm.sh ] || {
		echo please install nvm then try again;
		echo see https://github.com/creationix/nvm#installation;
		exit 1
	} && . ~/.nvm/nvm.sh --no-use
	nvm install 8 && \
	nvm alias node 8 && \
	nvm alias default 8
	nvm use 8
	echo
	echo

	echo checking npm version...
	if npm list -g npm@5.6.0; then
	    echo already using npm@5.6.0
	else
	    echo trying to update npm...
	    npm install -g npm@5.6.0 ;fi
	echo
	echo

	echo checking pnpm...
	if npm list -g pnpm; then
	    echo pnpm already installed
	else
	    echo trying install pnpm...
	    npm install -g pnpm ;fi
	echo
	echo

	echo refreshing elsewheres...
	./quick/elsewheres
	echo
	echo ;}
